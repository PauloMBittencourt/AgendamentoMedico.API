@{
    ViewData["Title"] = "Área do Médico – Gerenciar Horários e Agendamentos";
    Layout = "_Layout";
}

<div class="container my-4">
    <h2 class="mb-4 text-center">Área do Médico</h2>

    <div class="legend-container text-center">
        <span class="legend-item">
            <span class="legend-color" style="background-color: #28a745;"></span> Horário Disponível
        </span>
        <span class="legend-item">
            <span class="legend-color" style="background-color: #dc3545;"></span> Agendamento pelo Paciente
        </span>
    </div>

    <div id="calendarMedico"></div>

    <div class="modal fade"
         id="createHorarioModal"
         tabindex="-1"
         aria-labelledby="createHorarioLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createHorarioLabel">
                        Confirmar Novo Horário
                    </h5>
                    <button type="button"
                            class="btn-close"
                            data-bs-dismiss="modal"
                            aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    <p>
                        Deseja cadastrar o horário de
                        <strong><span id="createStartText"></span></strong>
                        até
                        <strong><span id="createEndText"></span></strong>?
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button"
                            class="btn btn-secondary"
                            data-bs-dismiss="modal">
                        Cancelar
                    </button>
                    <button type="button"
                            class="btn btn-success"
                            id="confirmCreateButton">
                        Confirmar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade"
         id="removeHorarioModal"
         tabindex="-1"
         aria-labelledby="removeHorarioLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content modal-remove">
                <div class="modal-header">
                    <h5 class="modal-title" id="removeHorarioLabel">
                        Remover Horário Disponível
                    </h5>
                    <button type="button"
                            class="btn-close"
                            data-bs-dismiss="modal"
                            aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    <p>
                        Tem certeza de que deseja remover o horário disponível em
                        <strong><span id="removeDateText"></span></strong>?
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button"
                            class="btn btn-secondary"
                            data-bs-dismiss="modal">
                        Cancelar
                    </button>
                    <button type="button"
                            class="btn btn-danger"
                            id="confirmRemoveButton">
                        Remover
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="appointment-table-medico">
        <h3 class="mb-3">Meus Agendamentos</h3>
        <table class="table table-bordered table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Data / Horário</th>
                    <th>Paciente</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody id="appointmentsMedicoBody">
            </tbody>
        </table>
    </div>

    <div class="modal fade"
         id="feedbackModal"
         tabindex="-1"
         aria-labelledby="feedbackModalLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="feedbackModalTitle">Título</h5>
                    <button type="button"
                            class="btn-close"
                            data-bs-dismiss="modal"
                            aria-label="Fechar"></button>
                </div>
                <div class="modal-body" id="feedbackModalBody">
                </div>
                <div class="modal-footer">
                    <button type="button"
                            class="btn btn-secondary"
                            data-bs-dismiss="modal">
                        Fechar
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const feedbackModalEl = document.getElementById('feedbackModal');
            const feedbackModal = new bootstrap.Modal(feedbackModalEl);
            const feedbackModalTitle = document.getElementById('feedbackModalTitle');
            const feedbackModalBody  = document.getElementById('feedbackModalBody');

            const removeModalEl = document.getElementById('removeHorarioModal');
            const removeModal = new bootstrap.Modal(removeModalEl);

            const createModalEl = document.getElementById('createHorarioModal');
            const createModal = new bootstrap.Modal(createModalEl);

            let horarioParaRemoverId = null;
            let createStart = null;
            let createEnd = null;

            function showFeedback(tipo, mensagem) {
                feedbackModalTitle.innerText = (tipo === 'sucesso') ? 'Sucesso' : 'Erro';
                feedbackModalBody.innerText  = mensagem;
                feedbackModal.show();
            }

            const calendarEl = document.getElementById('calendarMedico');
            const calendarMedico = new FullCalendar.Calendar(calendarEl, {
                initialView: 'timeGridWeek',
                locale: 'pt-br',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'timeGridDay,timeGridWeek,dayGridMonth'
                },
                buttonText: {
                    today: 'Hoje',
                    month: 'Mês',
                    week: 'Semana',
                    day: 'Dia'
                },
                allDaySlot: false,
                slotMinTime: '06:00:00',
                slotMaxTime: '20:00:00',
                slotDuration: '00:30:00',
                businessHours: {
                    daysOfWeek: [1,2,3,4,5],
                    startTime: '08:00',
                    endTime: '18:00'
                },
                selectable: true,
                selectOverlap: false,

                select: function(selectionInfo) {
                    createStart = selectionInfo.startStr;
                    createEnd   = selectionInfo.endStr;

                    document.getElementById('createStartText').innerText =
                        new Date(createStart).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' }) +
                        ' em ' +
                        new Date(createStart).toLocaleDateString('pt-BR', { dateStyle: 'full' });

                    document.getElementById('createEndText').innerText =
                        new Date(createEnd).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });

                    createModal.show();
                },

                events: function(fetchInfo, successCallback, failureCallback) {
                    fetch('/Funcionarios/GetMeusHorariosDisponiveis')
                        .then(resp => {
                            if (!resp.ok) throw new Error('Falha ao buscar horários disponíveis.');
                            return resp.json();
                        })
                        .then(disponiveis => {
                            const eventosDisponiveis = disponiveis.map(slot => ({
                                id: slot.id,
                                groupId: 'disponiveis',
                                start: slot.start,
                                end: slot.end,
                                title: 'Disponível',
                                backgroundColor: '#28a745',
                                borderColor: '#28a745',
                                extendedProps: { tipo: 'disponivel' }
                            }));
                            fetch('/Funcionarios/GetMeusAgendamentos')
                                .then(resp2 => {
                                    if (!resp2.ok) throw new Error('Falha ao buscar agendamentos.');
                                    return resp2.json();
                                })
                                .then(agendamentos => {
                                    const eventosAgendados = agendamentos.map(a => ({

                                        id: a.id,
                                        groupId: 'agendados',
                                        start: startDate.toISOString(), 
                                        end: endDate.toISOString(),
                                        title: 'Agendado: ' + a.pacienteNome,
                                        backgroundColor: '#dc3545',
                                        borderColor: '#dc3545',
                                        extendedProps: {
                                            tipo: 'agendado',
                                            pacienteNome: a.pacienteNome,
                                            status: a.status
                                    }
                                }));
                                    successCallback(eventosDisponiveis.concat(eventosAgendados));
                                })
                                .catch(err2 => {
                                    console.error(err2);
                                    failureCallback(err2);
                                });
                        })
                        .catch(err => {
                            console.error(err);
                            failureCallback(err);
                        });
                },

                eventClick: function(info) {
                    const tipo = info.event.extendedProps.tipo;
                    if (tipo === 'disponivel') {
                        horarioParaRemoverId = info.event.id;
                        const dt = new Date(info.event.start);
                        document.getElementById('removeDateText').innerText =
                            dt.toLocaleDateString('pt-BR', { dateStyle: 'full' }) +
                            ' às ' +
                            dt.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
                        removeModal.show();
                    }
                }
            });

            calendarMedico.render();

            document.getElementById('confirmCreateButton').addEventListener('click', function() {
                if (!createStart || !createEnd) return;

                fetch('/Funcionarios/SalvarHorarioDisponivel', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({
                       InicioConsulta: createStart,
                       FimConsulta: createEnd
                   })
                })
                .then(response => {
                    if (!response.ok) throw new Error('Erro ao salvar horário no servidor.');
                    return response.json();
                })
                .then(novoSlot => {
                    calendarMedico.addEvent({
                        id: novoSlot.id,
                        groupId: 'disponiveis',
                        start: novoSlot.start,
                        end: novoSlot.end,
                        title: 'Disponível',
                        backgroundColor: '#28a745',
                        borderColor:    '#28a745',
                        extendedProps: {
                            tipo: 'disponivel'
                        }
                    });
                    showFeedback('sucesso', 'Horário cadastrado com sucesso.');
                })
                .catch(err => {
                    console.error(err);
                    showFeedback(
                        'erro',
                        'Não foi possível cadastrar o horário. Verifique sua conexão ou tente novamente.'
                    );
                })
                .finally(() => {
                    createModal.hide();
                    calendarMedico.unselect();
                    createStart = null;
                    createEnd   = null;
                });
            });

            document.getElementById('confirmRemoveButton').addEventListener('click', function() {
                if (!horarioParaRemoverId) return;

                fetch('/Funcionarios/RemoverHorarioDisponivel', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({ id: horarioParaRemoverId })
                })
                .then(resp => {
                    if (!resp.ok) throw new Error('Erro ao remover horário no servidor.');
                    const ev = calendarMedico.getEventById(horarioParaRemoverId);
                    if (ev) ev.remove();
                    showFeedback('sucesso', 'Horário removido com sucesso.');
                })
                .catch(err => {
                    console.error(err);
                    showFeedback(
                        'erro',
                        'Não foi possível remover o horário. Verifique sua conexão ou tente novamente.'
                    );
                })
                .finally(() => {
                    removeModal.hide();
                    horarioParaRemoverId = null;
                });
            });

        function loadAppointmentsMedico() {
            fetch('@Url.Action("GetMeusAgendamentos", "Funcionarios")')
                .then(response => {
                        if (!response.ok) throw new Error('Erro ao buscar agendamentos.');
                        return response.json();
                    })
                    .then(data => {
                        const tbody = document.getElementById('appointmentsMedicoBody');
                        tbody.innerHTML = '';

                        if (data.length === 0) {
                            const tr = document.createElement('tr');
                            const td = document.createElement('td');
                            td.setAttribute('colspan', '3');
                            td.classList.add('text-center', 'fst-italic');
                            td.innerText = 'Nenhum agendamento encontrado.';
                            tr.appendChild(td);
                            tbody.appendChild(tr);
                            return;
                        }

                        data.forEach(item => {
                            const tr = document.createElement('tr');

                            const tdDate = document.createElement('td');
                            const dt = new Date(item.dataHora);
                            tdDate.innerText = dt.toLocaleString('pt-BR', {
                                dateStyle: 'short',
                                timeStyle: 'short'
                            });
                            tr.appendChild(tdDate);

                            const tdPaciente = document.createElement('td');
                            tdPaciente.innerText = item.pacienteNome;
                            tr.appendChild(tdPaciente);

                            const tdStatus = document.createElement('td');
                            tdStatus.innerText = item.status;
                            tr.appendChild(tdStatus);

                            tbody.appendChild(tr);
                        });
                    })
                    .catch(err => {
                        console.error(err);
                        const tbody = document.getElementById('appointmentsMedicoBody');
                        tbody.innerHTML = '';
                        const tr = document.createElement('tr');
                        const td = document.createElement('td');
                        td.setAttribute('colspan', '3');
                        td.classList.add('text-center', 'text-danger');
                        td.innerText = 'Erro ao carregar agendamentos.';
                        tr.appendChild(td);
                        tbody.appendChild(tr);
                    });
            }

            loadAppointmentsMedico();
        });
    </script>
}
