// <auto-generated />
using System;
using AgendamentoMedico.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AgendamentoMedico.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250520015502_Correção do CargosIdentity")]
    partial class CorreçãodoCargosIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AgendamentoMedico.Domain.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Nome");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("AgendamentoMedico.Domain.Entities.Funcionario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cargo")
                        .HasColumnType("int")
                        .HasColumnName("Cargo");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Nome");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("AgendamentoMedico.Domain.Entities.Funcionario_Cliente", b =>
                {
                    b.Property<Guid>("HorarioDisponivelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("DataAgendamento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.HasKey("HorarioDisponivelId", "ClienteId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Agendamentos");
                });

            modelBuilder.Entity("AgendamentoMedico.Domain.Entities.HorarioDisponivel", b =>
                {
                    b.Property<Guid>("HorarioDisponivelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Disponivel")
                        .HasColumnType("bit");

                    b.Property<Guid>("FuncionarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HorarioDisponivelId");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("HorariosDisponiveis");
                });

            modelBuilder.Entity("AgendamentoMedico.Domain.Entities.IdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CargosIdentity");
                });

            modelBuilder.Entity("AgendamentoMedico.Domain.Entities.IdentityRole_Usuario", b =>
                {
                    b.Property<Guid>("CargosIdentityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.HasKey("CargosIdentityId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("CargosIdentity_Usuarios", (string)null);
                });

            modelBuilder.Entity("AgendamentoMedico.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomeUsuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("AgendamentoMedico.Domain.Entities.Cliente", b =>
                {
                    b.HasOne("AgendamentoMedico.Domain.Entities.Usuario", "UsuarioCliente")
                        .WithOne("ClienteId")
                        .HasForeignKey("AgendamentoMedico.Domain.Entities.Cliente", "UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UsuarioCliente");
                });

            modelBuilder.Entity("AgendamentoMedico.Domain.Entities.Funcionario", b =>
                {
                    b.HasOne("AgendamentoMedico.Domain.Entities.Usuario", "UsuarioFuncionario")
                        .WithOne("FuncionarioId")
                        .HasForeignKey("AgendamentoMedico.Domain.Entities.Funcionario", "UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UsuarioFuncionario");
                });

            modelBuilder.Entity("AgendamentoMedico.Domain.Entities.Funcionario_Cliente", b =>
                {
                    b.HasOne("AgendamentoMedico.Domain.Entities.Cliente", "ClienteFk")
                        .WithMany("Agendamentos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgendamentoMedico.Domain.Entities.HorarioDisponivel", "HorarioDisponivel")
                        .WithMany("Agendamentos")
                        .HasForeignKey("HorarioDisponivelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClienteFk");

                    b.Navigation("HorarioDisponivel");
                });

            modelBuilder.Entity("AgendamentoMedico.Domain.Entities.HorarioDisponivel", b =>
                {
                    b.HasOne("AgendamentoMedico.Domain.Entities.Funcionario", "Funcionario")
                        .WithMany("HorariosDisponiveis")
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionario");
                });

            modelBuilder.Entity("AgendamentoMedico.Domain.Entities.IdentityRole_Usuario", b =>
                {
                    b.HasOne("AgendamentoMedico.Domain.Entities.IdentityRole", "CargosIdentityFk")
                        .WithMany("UsuarioFk")
                        .HasForeignKey("CargosIdentityId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("AgendamentoMedico.Domain.Entities.Usuario", "UsuarioFk")
                        .WithMany("Cargos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("CargosIdentityFk");

                    b.Navigation("UsuarioFk");
                });

            modelBuilder.Entity("AgendamentoMedico.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Agendamentos");
                });

            modelBuilder.Entity("AgendamentoMedico.Domain.Entities.Funcionario", b =>
                {
                    b.Navigation("HorariosDisponiveis");
                });

            modelBuilder.Entity("AgendamentoMedico.Domain.Entities.HorarioDisponivel", b =>
                {
                    b.Navigation("Agendamentos");
                });

            modelBuilder.Entity("AgendamentoMedico.Domain.Entities.IdentityRole", b =>
                {
                    b.Navigation("UsuarioFk");
                });

            modelBuilder.Entity("AgendamentoMedico.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Cargos");

                    b.Navigation("ClienteId");

                    b.Navigation("FuncionarioId");
                });
#pragma warning restore 612, 618
        }
    }
}
